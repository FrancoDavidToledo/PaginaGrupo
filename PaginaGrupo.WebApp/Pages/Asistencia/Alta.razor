@page "/asistencia/cargar/{Id:int}/{CodeUnidad}/{Estado}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IAsistenciaServicio asistenciaServicio
@inject IUnidadServicio unidadServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente, Hormiga")];


<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">

</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">@Titulo</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>




    @*    <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
    <DataAnnotationsValidator></DataAnnotationsValidator>*@
    @if (lista is null)
    {
        <div class="d-flex justify-content-center align-items-center loading mb-5">
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }
    else
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col">N°</th>
                    <th scope="col">Nombre</th>
                    <th scope="col">Apellido</th>
                    <th scope="col">Asistencia</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var row in lista)
                {

                    <tr>
                        <td class="col-1">@row.Id</td>
                        <td class="fw-bold col-3">@row.Nombre</td>
                        <td class="fw-bold col-5">@row.Apellido</td>
                        <td class="fw-bold col-2 align-items-center">
                            <div class="d-flex justify-content-center">
                                <button class="btn btn-sm btn-primary" >@row.Asistencia</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <div class="mt-3 mb-5">
        <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
        <a href="/Scouts/Panel" class="btn btn-secondary" style="width:130px">Volver</a>
    </div>

</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string CodeUnidad { get; set; }
    [Parameter] public string Estado { get; set; }

    private string Titulo = "Cargar Asistencia";
    private string boton = "Cargar";
    private InputFileChangeEventArgs inputFile;
    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }
    private string codigo = "CCAG";
    private List<UnidadDto>? listaUnidad = null;
    private bool IsDisabled;
    private string sexo = "F";


    private List<ScoutAsistenciaDto>? lista = null;


    //protected override async Task OnParametersSetAsync()
    //{
    //    var authState = await authencationState;
    //    if (Id != 0)
    //    {
    //        IsDisabled = true;
    //        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
    //        var response = await scoutServicio.ObtenerById(Id, token);
    //        if (response.EsCorrecto!)
    //        {
    //            modelo = (ScoutDto)response.Resultado!;
    //        }
    //        else
    //            toastService.ShowWarning(response.Mensaje);
    //    }

    //}
    protected override async Task OnInitializedAsync()
    {
        await ObtenerScouts(CodeUnidad, Convert.ToChar(Estado));
    }

    private async Task ObtenerScouts(string codigo, char estado)
    {

        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await asistenciaServicio.ObtenerListadoScouts(codigo, estado, Id, token);

        if (response.EsCorrecto)
        {
            lista = (List<ScoutAsistenciaDto>)response.Resultado!;
        }
        else
        {
            lista = new List<ScoutAsistenciaDto>();
        }


        //await ObtenerAsistencia2(codigo, buscar);

    }
    //private async Task GuardarCambios()
    //{
    //    modelo.Sexo = sexo;
    //    modelo.CodigoUnidad = codigo;
    //    var authState = await authencationState;
    //    var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
    //    bool respuesta = true;
    //    string mensaje = string.Empty;
    //    if (modelo.Nombre == null | modelo.Apellido == null | modelo.Sexo == null | modelo.CodigoUnidad == null)
    //    {

    //        respuesta = false;
    //        mensaje = "Faltan cargar campos obligatorios";

    //    }
    //    else
    //    {
    //        if (Id != 0)
    //        {
    //            var response = await scoutServicio.Editar(modelo, token);
    //            mensaje = response.Mensaje;
    //            if (!response.EsCorrecto)
    //            {
    //                respuesta = false;
    //            }

    //        }
    //        else
    //        {
    //            //modelo.Rol = "Administrador";
    //            var response = await scoutServicio.Crear(modelo, token);
    //            mensaje = response.Mensaje;
    //            if (!response.EsCorrecto)
    //            {
    //                respuesta = false;
    //            }

    //        }
    //    }
    //    if (respuesta)
    //    {
    //        toastService.ShowSuccess(mensaje);
    //        _navServicio.NavigateTo("/Scouts/panel");
    //    }
    //    else
    //        toastService.ShowWarning(mensaje);
    //}

    //private async Task CambiarTextoBoton(string texto)
    //{
    //    if (texto == "P")
    //    {
    //        texto = "A";
    //    }
    //    else if (texto == "A")
    //    {
    //        texto = "-";
    //    }
    //    else
    //    {
    //        texto = "P";
    //    }
    //}

}
