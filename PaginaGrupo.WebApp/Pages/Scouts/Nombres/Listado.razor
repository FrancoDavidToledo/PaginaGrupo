@page "/Scouts/Nombres/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IScoutServicio scoutServicio
@inject INombreScoutServicio nombreScoutServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;
@inject SweetAlertService Swal;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente, Hormiga")];


<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">

</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">Nombres Scouts</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>

    <p>Estás viendo los nombres de: <b>@modelo.Nombre @modelo.Apellido</b>.</p>

    <div>
    <h3>Listado actual</h3>

    <a class="col-2 btn btn-sm btn-primary mt-auto" href="/Scouts/Nombres/Nuevo/@modelo.Id">         + Cargar nuevo nombre     </a>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">N°</th>
                <th scope="col">Tipo de Nombre</th>
                <th scope="col">Nombre</th>
                <th scope="col">Fecha de Otorgamiento</th>
                <th scope="col">Unidad</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>

            @if (listaNombres != null)
            {
                @if (listaNombres.Count!=0)
                {
                foreach (var item in listaNombres)
                {
                    <tr>
                        <td class="col-1">@item.Id</td>@* aca poner un contador*@
                        <td class="col-2">@item.TipoNombre</td>
                        <td class="col-2">@item.Nombre</td>
                        <td class="col-2">@item.Fecha.ToString("dd/MM/yyyy")</td>
                        <td class="col-1">@item.CodigoUnidad</td>
                        <td class="col-1">
                            <button class="col-4 btn btn-sm btn-danger mt-auto" @onclick="(() => Borrar(item.Id))">
                                <i class="oi oi-trash fs-5"></i>
                            </button>
                        </td>
                    </tr>
                    }
                }
                else
                {
                    <tr>
                        <td></td>
                        <td></td>
                        <td><p class="text-center">Este Scout no posee ningun nombre actualmente</p></td>
                        <td></td>
                        
                        <td></td>
                        <td></td>
                        
                    </tr>
                }
            }

        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string boton = "Cargar";
    private ScoutNombreDto modelo = new ScoutNombreDto();
    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }
    private List<NombreScoutDto>? listaNombres = null;
    bool respuesta = false;
    string mensaje = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authencationState;
        if (Id != 0)
        {
            var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
            var response = await scoutServicio.ObtenerScoutNombre(Id, token);
            if (response.EsCorrecto!)
            {
                modelo = (ScoutNombreDto)response.Resultado!;
                await ObtenerNombres();
            }
            else
                toastService.ShowWarning(response.Mensaje);
        }

    }


    private async Task GuardarCambios()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        bool respuesta = true;
        string mensaje = string.Empty;


        //var response = new ResponseDTO<>();//scoutServicio.Migrar(modelo, token);
        //mensaje = response.Mensaje;
        //if (!response.EsCorrecto)
        //{
        //    respuesta = false;
        //}
        //if (respuesta)
        //{
        //    toastService.ShowSuccess(mensaje);
        //    _navServicio.NavigateTo("/Scouts/panel");
        //}
        //else
        //    toastService.ShowWarning(mensaje);
    }

    private async Task ObtenerNombres()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await nombreScoutServicio.ObtenerListadoNombres(Id, token);
        if (response.EsCorrecto)
        {
            listaNombres = (List<NombreScoutDto>)response.Resultado!;
        }
        else
        {
            listaNombres = new List<NombreScoutDto>();
        }

    }

    private async Task Borrar(int id)
    {
        var authState = await authencationState;
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar nombre",
                Text = "Deseas eliminar el nombre scout?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (resultado.IsConfirmed)
        {
            var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
            var eliminado = await nombreScoutServicio.Eliminar(id, token);


            mensaje = eliminado.Mensaje;
            if (eliminado.EsCorrecto)
            {
                respuesta = true;
                await ObtenerNombres();
            }

        }

    }
}
