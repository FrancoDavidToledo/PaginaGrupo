@page "/Scouts/Nombres/nuevo/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IScoutServicio scoutServicio
@inject IUnidadServicio unidadServicio
@inject ITipoNombreServicio tipoNombreServicio
@inject INombreScoutServicio nombreScoutServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente, Hormiga")];

<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">
</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">@Titulo</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>

    <p>Estás cargando un nombre para: <b>@modeloScout.Nombre @modeloScout.Apellido</b>.</p>
    <EditForm Model="modeloNombreScout" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="input-group mb-3">
            <label for="colFormLabel">Unidad: </label>
            <br />
            <select class="form-control-sm col-4 btn border-black" @bind="codigounidad" @onclick="(async()=> await ObtenerUnidades())">

                @if (listaUnidad is null)
                {
                    <option value="CCAG">Colonia de Castores Ángel de la Guarda</option>
                }
                else
                {
                    @if (listaUnidad != null)
                    {
                        @foreach (var codigos in listaUnidad)
                        {
                            <option value="@codigos.Codigo"> @codigos.Nombre</option>
                        }
                    }
                }

            </select>
        </div>

        <div class="input-group mb-3">
            <label for="colFormLabel">Tipo de Nombre: </label>
            <select class="form-control-sm col-3 btn border-black" @bind="idtipo" @onclick="(async()=> await ObtenerTiposNombres())">

                @if (listaTipos is null)
                {
                    <option value="1">Nombre de Presa</option>
                }
                else
                {
                    @if (listaTipos != null)
                    {
                        @foreach (var codigos in listaTipos)
                        {
                            <option value="@codigos.Id"> @codigos.Tipo</option>
                        }
                    }
                }

            </select>
        </div>
        <div class="form-group row mt-5">
            <div class="col-sm-10">
                <label for="colFormLabeL">Nombre</label>
                <input type="text" class="form-control form-control-sm" id="colFormLabel" @bind-value="modeloNombreScout.Nombre">
            </div>
        </div>
        <div class="form-group row mt-3">
            <div class="col-sm-10">
                <label for="colFormLabel">Fecha de Otorgamiento</label>
                <br />
                <InputDate class="form-control-sm" @bind-Value="modeloNombreScout.Fecha"></InputDate>
            </div>
        </div>

        <div class="mt-3 mb-5">
            <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
            <a href="/Scouts/Panel" class="btn btn-secondary" style="width:130px">Volver</a>
        </div>

    </EditForm>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Cargar Nombre Scout";
    private string boton = "Cargar";
    private ScoutNombreDto modeloScout = new ScoutNombreDto();
    private NombreScoutDto modeloNombreScout = new NombreScoutDto();
    private InputFileChangeEventArgs inputFile;
    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }
    private string codigo = "USMP";
    private List<UnidadDto>? listaUnidad = null;
    private List<TipoNombreDto>? listaTipos = null;
    private int idtipo = 1;
    private string codigounidad = "CCAG";

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authencationState;
        if (Id != 0)
        {
            var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
            var response = await scoutServicio.ObtenerScoutNombre(Id, token);
            if (response.EsCorrecto!)
            {
                modeloScout = (ScoutNombreDto)response.Resultado!;
                await ObtenerUnidades();
                await ObtenerTiposNombres();
            }
            else
                toastService.ShowWarning(response.Mensaje);

        }

    }
    protected override async Task OnInitializedAsync()
    {

        modeloNombreScout.Fecha = DateTime.Today;
    }

    private async Task GuardarCambios()
    {
        modeloNombreScout.CodigoUnidad = codigounidad;
        modeloNombreScout.IdTipo = idtipo;
        modeloNombreScout.IdScout = Id;
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        bool respuesta = true;
        string mensaje = string.Empty;
        
        if (modeloNombreScout.Nombre == null | modeloNombreScout.CodigoUnidad == null)
        {

            respuesta = false;
            mensaje = "Faltan cargar campos obligatorios";

        }
        else
        {

            var response = await nombreScoutServicio.Crear(modeloNombreScout, token);
                mensaje = "Nombre scout cargado con exito.";
                if (!response.EsCorrecto)
                {
                    respuesta = false;
                }

        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/Scouts/panel");
        }
        else
            toastService.ShowWarning(mensaje);
    }

    private async Task ObtenerUnidades()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await unidadServicio.ObtenerListadoUnidades(token);
        if (response.EsCorrecto)
        {
            listaUnidad = (List<UnidadDto>)response.Resultado!;
        }
        else
        {
            listaUnidad = new List<UnidadDto>();
        }

    }
    private async Task ObtenerTiposNombres()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await tipoNombreServicio.ObtenerTipoNombres(token);
        if (response.EsCorrecto)
        {
            listaTipos = (List<TipoNombreDto>)response.Resultado!;
        }
        else
        {
            listaTipos = new List<TipoNombreDto>();
        }

    }
}
