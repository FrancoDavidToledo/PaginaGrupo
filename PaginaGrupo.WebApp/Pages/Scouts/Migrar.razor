@page "/Scouts/Migrar/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IScoutServicio scoutServicio
@inject IUnidadServicio unidadServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente, Hormiga")];


<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">

</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">Migrar Scout</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>

    <p>Estas por cambiar de unidad a <b>@modelo.Nombre @modelo.Apellido</b>.</p>

    <p>Antes de realizar la migración, recordá cargar la asistencia y las progresiones, ya que no podrán ser cargadas luego.</p>

    <div class="form-group row mt-3">
        <div class="col-sm-10">
            <label for="colFormLabel">Unidad destino: </label>
            <select class="form-control-sm col-6 btn border-black" @bind="modelo.CodigoUnidad">

                @if (listaUnidad != null)
                {
                    @foreach (var codigos in listaUnidad)
                    {
                        <option value="@codigos.Codigo"> @codigos.Nombre</option>
                    }
                }
                }
            </select>
        </div>
    </div>

    <button class="btn btn-outline-secondary" type="button" @onclick="(async()=> await GuardarCambios())">
        Migrar
    </button>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private ScoutDto modelo = new ScoutDto();
    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }
    private List<UnidadDto>? listaUnidad = null;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authencationState;
        if (Id != 0)
        {
            var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
            var response = await scoutServicio.ObtenerById(Id, token);
            if (response.EsCorrecto!)
            {
                modelo = (ScoutDto)response.Resultado!;
                await ObtenerUnidades();
            }
            else
                toastService.ShowWarning(response.Mensaje);
        }

    }


    private async Task GuardarCambios()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        bool respuesta = true;
        string mensaje = string.Empty;


        var response = await scoutServicio.Migrar(modelo, token);
        mensaje = response.Mensaje;
        if (!response.EsCorrecto)
        {
            respuesta = false;
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/Scouts/panel");
        }
        else
            toastService.ShowWarning(mensaje);
    }

    private async Task ObtenerUnidades()
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await unidadServicio.ObtenerListadoUnidades(token);
        if (response.EsCorrecto)
        {
            listaUnidad = (List<UnidadDto>)response.Resultado!;
        }
        else
        {
            listaUnidad = new List<UnidadDto>();
        }

    }

}
