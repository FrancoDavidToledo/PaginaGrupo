@page "/Noticias/Nuevo"
@page "/Noticias/editar/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities


@inject INoticiaServicio noticiaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente")];


<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">

</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">@Titulo</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>

   <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
      <div class="form-group row mt-5">
         <div class="col-sm-10">
             <label for="colFormLabeL">Titulo de la noticia</label>
                <input type="text" class="form-control form-control-sm" id="colFormLabel" @bind-value="modelo.Titulo">
         </div>
      </div>
      <div class="form-group row mt-3">
         <div class="col-sm-10">
             <!--Aca se cargaria el autor por codigo(usuario conectado)-->
             <label for="colFormLabel">Autor</label>
                <input type="text" class="form-control form-control-sm" id="colFormLabel" @bind-value="modelo.Autor">
         </div>
      </div>
      <div class="form-group row mt-3">
         <div class="col-sm-10">
             <label for="colFormLabel">Copete de la noticia</label>
                <input type="text" class="form-control" id="colFormLabel" @bind-value="modelo.Copete">
         </div>
      </div>

@*      Falta ver como hacer el bind-value con textarea
      <div class="form-group mt-3">
        <label for="exampleFormControlTextarea1">Noticia</label>
        <textarea class="form-control non-resizable" id="exampleFormControlTextarea1" style="height: 500px;" rows="3"></textarea>
       </div>
*@


        <div class="form-group row mt-3">
            <div class="col-sm-10">
                <label for="colFormLabel">Cuerpo de la noticia</label>
                <textarea class="form-control" id="colFormLabel" rows="15" @bind="modelo.Cuerpo"></textarea>
            </div>
        </div>


      <div class="form-group row mt-3">
         <div class="col-sm-10">
             <label for="colFormLabel">Fecha de la noticia</label>
                <input type="text" class="form-control" id="colFormLabel" @bind-value="modelo.FechaNoticia">
         </div>
      </div>
@*                        <div class="mb-3">
                  <DateInput TValue="DateOnly" @bind="@date1" Placeholder="Enter Date" />
                </div>*@
      <div class="form-flex">
@*
                  <table class="table-condensed table-bordered table-striped" >
                     <thead>
                        <tr>
                           <th colspan="7">
                              <span class="btn-group">
                              <a class="btn"><i class="icon-chevron-left"></i></a>
                              <a class="btn active">Diciembre 2023</a>
                              <a class="btn"><i class="icon-chevron-right"></i></a>
                              </span>
                           </th>
                        </tr>
                        <tr>
                           <th>Lu</th>
                           <th>Ma</th>
                           <th>Mi</th>
                           <th>Ju</th>
                           <th>Vi</th>
                           <th>Sa</th>
                           <th>Do</th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td class="muted">29</td>
                           <td class="muted">30</td>
                           <td>1</td>
                           <td>2</td>
                           <td>3</td>
                           <td>4</td>
                           <td>5</td>
                        </tr>
                        <tr>
                           <td>6</td>
                           <td>7</td>
                           <td>8</td>
                           <td>9</td>
                           <td>10</td>
                           <td>11</td>
                           <td>12</td>
                        </tr>
                        <tr>
                           <td>13</td>
                           <td>14</td>
                           <td>15</td>
                           <td>16</td>
                           <td>17</td>
                           <td>18</td>
                           <td>19</td>
                        </tr>
                        <tr>
                           <td class="btn-primary"><strong>20</strong></td>
                           <td>21</td>
                           <td>22</td>
                           <td>23</td>
                           <td>24</td>
                           <td>25</td>
                           <td>26</td>
                        </tr>
                        <tr>
                           <td>27</td>
                           <td>28</td>
                           <td>29</td>
                           <td>30</td>
                           <td>31</td>
                           <td class="muted">1</td>
                           <td class="muted">2</td>
                        </tr>
                     </tbody>
                  </table>*@
              
            <div class="adjuntos form-flex-column">
                <h3>Imagenes</h3>
                <div class="mb-3">
                  <label for="formFileMultiple" class="form-label">Selecciona imagenes para la noticia</label>
                  @*<input class="form-control" type="file" id="formFileMultiple" multiple>*@
                  <InputFile class="form-control" OnChange="HandleFileSelection" multiple />
                </div>
               

               @*<div class="lista-adjuntos">
                   <button class="texto-adjunto adjunto-selecionar">Seleccioná archivos</button>
                   <div class="texto-adjunto">Noticia.jpg</div>
                   <div class="texto-adjunto">Noticia2.jpg</div>
                   <div class="texto-adjunto">Noticia3.jpg</div>
                   <!--Esto idealmente deberia ser una lista-->
               </div>*@
            </div>
        </div>


@*            <div class="form-flex-column">
                <button class="btn btn-primary" onclick="@GuardarCambios()">@boton</button>
               <br />
               <button class="btn btn-success">Publicar noticia</button>
               <br />
               <button class="btn btn-danger">Borrar noticia</button>
               <br />


             <AuthorizeView>
                <Authorized>
                    <!--Esto solo se deberia mostrar si se accede como admin-->
               <button class="btn btn-warning text-light">Autorizar Noticia</button>
               </Authorized>
            </AuthorizeView>
            </div>
         </div>*@
                     <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/Noticias" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>

        </EditForm>

@*        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
        <div class="mt-3">
            <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
            <a href="/Noticias" class="btn btn-secondary" style="width:130px">Volver</a>
        </div>

    </EditForm>*@
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Crear Noticia";
    private string boton = "Crear Borrador";
    private NoticiaAltaDto modelo = new NoticiaAltaDto();
    private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(1));


    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        if (Id != 0)
        {
            Titulo = "Editar Noticia";
            boton = "Guardar";

            var response = await noticiaServicio.ObtenerById(Id);
            if (response.EsCorrecto!)
            {
                modelo = (NoticiaAltaDto)response.Resultado!;
            }
            else
                toastService.ShowWarning(response.Mensaje);
        }

    }

    private async Task GuardarCambios()
    {
        var authState = await authencationState;
        modelo.IdUsuario = Convert.ToInt32(authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault());

        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await noticiaServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Noticia fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No puedo editar";
            }
        }
        else
        {
            //modelo.Rol = "Administrador";
            var response = await noticiaServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Noticia fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No puedo crear";
            }

        }

        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/Noticias");
        }
        else
            toastService.ShowWarning(mensaje);
    }

    private List<IBrowserFile> archivosSeleccionados = new List<IBrowserFile>();
    private string carpetaImagenes = "Imgs";
    //Este metodo se ejecuta al momento de seleccionar los archivos de manera automatica.
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        archivosSeleccionados.AddRange(e.GetMultipleFiles());

        foreach (var archivoSeleccionado in archivosSeleccionados)
        {
            if (archivoSeleccionado != null)
            {
                // Genera nombre único
                string nombreArchivo = $"{Guid.NewGuid()}_{archivoSeleccionado.Name}";

                // Genera ruta completa 
                string rutaCompleta = Path.Combine(carpetaImagenes, nombreArchivo);

                // Guardar la imagen en wwwroot/Imgs
                await using (var stream = new FileStream(Path.Combine("wwwroot", rutaCompleta), FileMode.Create))
                {
                    await archivoSeleccionado.OpenReadStream().CopyToAsync(stream);
                }

                
                // faltaria pasarle estas rutas a la noticia, podria ser por un metodo o por un return de este mismo.
            }
        }
    }

}
