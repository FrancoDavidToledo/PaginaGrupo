@page "/Noticias/Nuevo"
@page "/Noticias/editar/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;

@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IAdjuntoServicio adjuntoServicio
@inject INoticiaServicio noticiaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;

@*los 2 renglones siguientes son para restringir la pantalla a un rol en especial*@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Dirigente, Hormiga")];


<head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Grupo Scout San Patricio</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap" rel="stylesheet">

</head>


<div class="card-header">
    <h3 class="text-center font-weight-light my-4">@Titulo</h3>
</div>
<!------ Include the above in your HEAD tag ---------->
<div>

    


   <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
      <div class="form-group row mt-5">
         <div class="col-sm-10">
             <label for="colFormLabeL">Titulo de la noticia</label>
                <input type="text" class="form-control form-control-sm" id="colFormLabel" @bind-value="modelo.Titulo">
         </div>
      </div>
      <div class="form-group row mt-3">
         <div class="col-sm-10">
             <!--Aca se cargaria el autor por codigo(usuario conectado)-->
             <label for="colFormLabel">Autor</label>
                <input type="text" class="form-control form-control-sm" id="colFormLabel" @bind-value="modelo.Autor">
         </div>
      </div>
      <div class="form-group row mt-3">
         <div class="col-sm-10">
             <label for="colFormLabel">Copete de la noticia</label>
                <input type="text" class="form-control" id="colFormLabel" @bind-value="modelo.Copete">
         </div>
      </div>

        <div class="form-group row mt-3">
            <div class="col-sm-10">
                <label for="colFormLabel">Cuerpo de la noticia</label>


                <div class="row">
                    <table class="col-4">
                        <th class="col-1"><button type="button" @onclick="(async ()=> await InsertarNegrita(modelo.Cuerpo))">Negrita</button></th>
                        <th class="col-1"><button type="button" @onclick="(async ()=> await InsertarCursiva(modelo.Cuerpo))">Cursiva</button></th>
                        <th class="col-1"><button type="button" @onclick="(async ()=> await InsertarSubrayado(modelo.Cuerpo))">Subrayado</button></th>
                        <th class="col-1"><button type="button" @onclick="(async ()=> await InsertarTachado(modelo.Cuerpo))">Tachado</button></th>
                    </table>
                </div>
                <textarea class="form-control" id="colFormLabel" rows="15" @bind="modelo.Cuerpo"></textarea>
            </div>
        </div>


        <div class="form-group row mt-3">
            <div class="col-sm-10">
                <label for="colFormLabel">Fecha de la noticia</label>
                <br />
                <InputDate class="form-control-sm" @bind-Value="modelo.FechaNoticia"></InputDate>
            </div>
        </div>
        
        <div class="adjuntos form-flex-column">
            <h3 class="mb-3 mt-5">Imágenes</h3>
            <div class="mb-3">
                <label for="formFileMultiple" class="form-label">Selecciona imágenes para la noticia</label>
                @*<input class="form-control" type="file" id="formFileMultiple" multiple>*@
                <div class="input-group">
                    <input type="text" class="form-control" @bind="nuevoLink" placeholder="Escribe tu enlace aquí" />
                    <button class="btn btn-secondary" type="button" @onclick="(async ()=> await CargarListaImg())">Agregar a la lista</button>
                </div>
            </div>
        </div>

        @if (linksImgs.Any())
        {
            <ul class="list-group">
                @foreach (var item in @linksImgs)
                {
                    <div class="row mb-2">  
                        <li class="list-group-item col-8" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;" >@item</li> 
                        <button class="btn btn-danger col-4"type="button" @onclick="(async ()=> await EliminarDeListaImg(item))">Eliminar</button>
                    </div>
                }
            </ul>
        }

        


            <div class="mt-3 mb-5">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/Noticias/p/1" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>

        </EditForm>



</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Crear Noticia";
    private string boton = "Crear";
    private NoticiaAltaDto modelo = new NoticiaAltaDto();
    //private IEnumerable<AdjuntosDto> adjuntosAux;
    private List<string> linksImgs = new List<string>();
    private List<string> linksImgsAux = new List<string>();
    private string nuevoLink;

    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authencationState;
        if (Id != 0)
        {
            Titulo = "Editar Noticia";
            boton = "Guardar";
            var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
            var response = await noticiaServicio.ObtenerById(Id, token);
            if (response.EsCorrecto!)
            {
                modelo = (NoticiaAltaDto)response.Resultado!;
                var responseAdjunto = await adjuntoServicio.GetAdjuntosNoticia(Id);
                CargarListaImg(responseAdjunto.Data);

            }
            else
                toastService.ShowWarning(response.Mensaje);
        }

    }
    protected override async Task OnInitializedAsync()
    {
        modelo.FechaNoticia = DateTime.Today;
    }

    private async Task GuardarCambios()
    {
        var authState = await authencationState;
        modelo.IdUsuario = Convert.ToInt32(authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault());
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        bool respuesta = true;
        string mensaje = string.Empty;
        if (modelo.Titulo == null | modelo.Copete == null | modelo.Cuerpo == null | modelo.Autor == null)
        {

            respuesta = false;
            mensaje = "Debes completar todos los campos";

        }
        else
        {
            if (Id != 0)
            {
                var response = await noticiaServicio.Editar(modelo, token);
                mensaje = response.Mensaje;
                if (!response.EsCorrecto)
                {
                    respuesta = false;
                }
                var responseAdjunto = await adjuntoServicio.GetAdjuntosNoticia(Id);
                await EliminarAdjuntoRepetido(responseAdjunto.Data);
                GuardarImg(Id);
                //TODO Abria que recorrer las listas de adjuntos y la respuesta de adjuntos de la API, si no existe en la API guardarlo, si no, no.

            }
            else
            {
                //modelo.Rol = "Administrador";
                var response = await noticiaServicio.Crear(modelo, token);
                mensaje = response.Mensaje;
                if (!response.EsCorrecto)
                {
                    respuesta = false;
                }
                int aux = response.Resultado.Id;
                GuardarImg(aux);


            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/Noticias/p/1");
        }
        else
            toastService.ShowWarning(mensaje);
    }



    private async Task CargarListaImg()
    {
        if (!string.IsNullOrWhiteSpace(nuevoLink))
        {
            linksImgs.Add(nuevoLink);
            nuevoLink = string.Empty;
        }
        else
        {
            toastService.ShowWarning("No hay link que cargar.");
        }
    } 

    private async Task CargarListaImg(IEnumerable<AdjuntosDto> adjuntos)
    {

        foreach (var item in adjuntos)
        {
            linksImgs.Add(item.Adjunto);
        }
    } 

    private async Task EliminarAdjuntoRepetido(IEnumerable<AdjuntosDto> adjuntos)
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        foreach (var item in adjuntos)
        {
            if(linksImgs.Contains(item.Adjunto))
            {
                linksImgsAux.Add(item.Adjunto);
            }
            else
            {           
                adjuntoServicio.EliminarAdjuntos(item.Id,token);
            }
        }
        foreach (var item in linksImgsAux)
        {
            EliminarDeListaImg(item);
        }
    } 


    private async Task GuardarImg(int idNoticia)
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());
        List<string> linksFiltrados = await EliminarDuplicadoListaLinks();
        foreach (var item in linksFiltrados)
        {
            Adjuntos adjuntoAux = new Adjuntos
                {
                    Adjunto = item.ToString(),
                    IdNoticia = idNoticia
                };

            adjuntoServicio.InsertarAdjunto(adjuntoAux, token);
        }

    }

    private async Task EliminarDeListaImg(string link)
    {
        linksImgs.Remove(link);
    }

    private async Task InsertarNegrita(string cuerpo)
    {
        modelo.Cuerpo = cuerpo + "<b></b>";
    }
    private async Task InsertarCursiva(string cuerpo)
    {
        modelo.Cuerpo = cuerpo + "<em></em>";
    }
    private async Task InsertarSubrayado(string cuerpo)
    {
        modelo.Cuerpo = cuerpo + "<u></u>";
    }
    private async Task InsertarTachado(string cuerpo)
    {
        modelo.Cuerpo = cuerpo + "<s></s>";
    }

    private async Task<List<string>> EliminarDuplicadoListaLinks()
    {

        List<string> linksFiltrados = linksImgs
            .Select(item => item.ToLower())
            .Distinct()
            .ToList();

        return linksFiltrados;

    }

}
