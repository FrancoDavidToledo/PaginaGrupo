@page "/Noticias/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using PaginaGrupo.WebApp.Extensiones
@using PaginaGrupo.WebApp.Servicios.Contrato;
@using PaginaGrupo.Core.DTOs
@using PaginaGrupo.Core.Entities

@inject IAdjuntoServicio adjuntoServicio
@inject INoticiaServicio noticiaServicio
@inject IUsuarioServicio usuarioServicio
@inject IComentarioServicio comentarioServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject AuthenticationStateProvider autencacionProvider;





@if (modelo.Titulo is null)
{
   <div class="d-flex justify-content-center align-items-center loading">
      <div class="spinner-border" role="status">
        <span class="sr-only"></span>
      </div>
    </div>
}
else
{
    
<div class="flex-noticia align-items-center">
    
    <div class="flex-encabezado">
        <h1>@modelo.Titulo</h1>
            @if (modelo.Copete != null)
            {
                <h3>
                    @modelo.Copete
                </h3>
            }

        <div id="carouselExampleCaptions" class="carousel slide carousel-dark">
    @*        <div class="carousel-indicators">
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="0" class="active"
                    aria-current="true" aria-label="Slide 1"></button>
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="1"
                    aria-label="Slide 2"></button>
                <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="2"
                    aria-label="Slide 3"></button>
            </div>*@
            <div class="carousel-inner">
                @if (linksImgs is null || linksImgs.Count == 0)
                {

                    <div class="carousel-item active" data-bs-interval="10000">
                        <img src="Imgs/banner1.jpeg" mx-auto d-block class="d-block w-100 h-100" alt="...">

                    </div>
                    <div class="carousel-item">
                        <img src="Imgs/banner2.jpeg" mx-auto d-block class="d-block w-100 h-100" alt="..." >

                    </div>
                    <div class="carousel-item">
                        <img src="Imgs/banner3.jpeg" class="d-block w-100 h-100" alt="...">

                    </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions"
                            data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions"
                            data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
        
                }
                else
                {
                    foreach (var item in linksImgs)
                    {
                        if(primerImg)
                        {
                            <div class="carousel-item active" data-bs-interval="10000">
                            <img src="@item" mx-auto d-block class="d-block w-100 h-100" alt="...">
                            </div>

                            <div style="display:none">@(primerImg= false)</div>
                        }
                        else
                        {
                            <div class="carousel-item">
                                <img src="@item" mx-auto d-block class="d-block w-100 h-100" alt="..." >
                                    </div>
                        }
                    }       

                }

            </div>
                @if(linksImgs.Count()>=2)
                {
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions"
                    data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions"
                    data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>

                }
        </div>


    </div>
@*    <h3>
       @modelo.Copete
    </h3>*@
        @if (modelo.Cuerpo != null)
        {
            <p class="text-left">
                @((MarkupString)modelo.Cuerpo.Replace("\n", "<br />"))
            </p>
        }

        <p class="autor">Escrito por: @modelo.Autor - @modelo.FechaNoticia.ToString("dd/MM/yyyy")</p>

    
</div>


<div class="container mt-5 mb-5">

            <div class="row  d-flex justify-content-center">

                <div class="col-md-8">

                    <div class="headings d-flex justify-content-between align-items-center mb-3">
                        <h5>Comentarios</h5>
                        
                    </div>
                    <AuthorizeView>
                        <div class="card p-3 mb-3">
                     
                              <div class="user d-flex flex-column align-items-start">

                                 <div class="d-flex flex-row align-items-center">
                                     <img src="https://i.imgur.com/hczKIze.jpg" width="30" class="user-img rounded-circle m-2">
                                     <small class="fw-bold text-success ml-2"> 
                                 
                                         @context.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault()
                                    
                                     </small>
                         
                                 </div>
                            
                                <div class="new-comment-form" >
                                
                             
                                    <form>
                                        <div class="col-md-10"> 
                                          @*<textarea class="form-control non-resizable" id="exampleFormControlTextarea1" rows="3" placeholder="Deja tu comentario.."></textarea>*@
                                        <textarea class="form-control non-resizable" id="colFormLabel" rows="3" placeholder="Deja tu comentario.." @bind="comentario.Contenido"></textarea>
                                    </div>

                                    @*<button type="submit" class="btn btn-outline-success mt-2">Enviar Comentario</button>*@
                                    <button class="btn btn-outline-success mt-2" type="button" @onclick="(async ()=> await GuardarComentario(comentario))">Enviar Comentario</button>
                                    </form>   
                                   </div>
                              </div>
                         
                        </div>
                    </AuthorizeView> 
                    <!--Comentarios existentes-->


                    @if (lista != null)
                    {
                        foreach (var item in lista)
                        {
                        <div class="card p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="user d-flex flex-row align-items-center">
                                    <img src="https://i.imgur.com/hczKIze.jpg" width="30" class="user-img rounded-circle m-2">
                                    <span>
                                        <small class="fw-bold text-success ml-2">@item.NombreUsuario</small>
                                        <br />
@*                                        <small class="font-weight-bold">@item.Contenido</small>
                                        <br />*@
                                        <p class="text-left">
                                            @((MarkupString)item.Contenido.Replace("\n", "<br/>"))
                                        </p>
                                    </span>
                                </div>
                                <small>@item.Fecha.ToString("dd/MM/yyyy")</small>
                            </div>
@*                            <div class="action d-flex justify-content-between mt-2 align-items-center">
                                <AuthorizeView Roles="Dirigente,Administrador">
                                    <Authorized>
                                        <!--Aca se tendria que verificar que el usuario sea Admin, Dirigente o ( Scout y coincidir con el usuario que creó el comentario)-->

                                        <div class="reply px-4">

                                            <small>Remove</small>

                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>*@
                        </div>
                        <br />
                        }
                    }




                </div>               
            </div>
        </div>

}


@code {


    //getNoticia(id)
    [Parameter]
    public int Id { get; set; }
    private string Titulo = "Crear Noticia";
    private string boton = "Crear Borrador";
    private NoticiaAltaDto modelo = new NoticiaAltaDto();
    private ComentarioDto comentario = new ComentarioDto();
    private List<string> linksImgs = new List<string>();
    private bool primerImg = true;
    private List<ComentarioPublicoDto>? lista = null;
   

    [CascadingParameter]
    private Task<AuthenticationState> authencationState { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            var response = await noticiaServicio.Obtener(Id);

            if (response.EsCorrecto!)
            {
                modelo = (NoticiaAltaDto)response.Resultado!;
                await CargarImagenes(Id);
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
                _navServicio.NavigateTo("/Noticias/P/1");
            }

            await ObtenerComentarios(Id);


        }
    }

    private async Task GuardarComentario(ComentarioDto comentario)
    {
        string mensaje = string.Empty;
        bool respuesta = true;
        var authState = await authencationState;

        comentario.IdUsuario = Convert.ToInt32(authState.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).Select(c => c.Value).SingleOrDefault());
        comentario.IdNoticia = modelo.Id;
        comentario.Fecha = DateTime.Today;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await comentarioServicio.Crear(comentario, token);
        mensaje = response.Mensaje;
        if (!response.EsCorrecto)
        {
            respuesta = false;
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo($"/Noticias/p/1");
        }
        else
            toastService.ShowWarning(mensaje);
    }


    private async Task CargarImagenes(int idNoticia)
    {
        var responseAdjunto = await adjuntoServicio.GetAdjuntosNoticia(idNoticia);

        foreach (var item in responseAdjunto.Data)
        {
            linksImgs.Add(item.Adjunto);
        }
    }

    private async Task ObtenerComentarios(int estado)
    {
        var authState = await authencationState;
        var token = Convert.ToString(authState.User.Claims.Where(c => c.Type == ClaimTypes.Authentication).Select(c => c.Value).SingleOrDefault());

        var response = await comentarioServicio.ObtenerComentariosActivos(estado);
        if (response != null)
        {
            lista = (List<ComentarioPublicoDto>)response.Data!;
        }
        else
        {
            lista = new List<ComentarioPublicoDto>();
        }

    }

   

}



